{"version":3,"sources":["components/ExerciseDetails/ExerciseDetailsHistory.tsx"],"names":["ExerciseDetailsHistory","exerciseHistory","isLoading","renderHeader","workout_name","size","renderDateAndTime","date","time","fontSize","fontWeight","color","renderSet","set","index","reps","weight","setNumber","justifyContent","space","calculateOneRepMax","Object","values","map","history","sets","isLoaded","w","h","startColor","endColor","borderWidth","borderColor","p","rounded","my"],"mappings":"sFAAA,iFAwGeA,UA7FgB,SAAC,GAGA,IAF9BC,EAE6B,EAF7BA,gBACAC,EAC6B,EAD7BA,UAEA,IAAKD,GAAmBC,EAAW,OAAO,cAAC,UAAD,IAE1C,IAAMC,EAAe,SAACC,GAAD,OACnB,cAAC,UAAD,CAASC,KAAM,KAAf,SAAsBD,KA2BlBE,EAAoB,SAACC,EAAcC,GAAf,OACxB,cAAC,UAAD,CACEC,SAAU,KACVC,WAAY,IACZC,MAAO,eAHT,SAIKJ,EAJL,KAIcC,KAUVI,EAAY,SAACC,EAAWC,GAC5B,IAAQC,EAA4BF,EAA5BE,KAAMC,EAAsBH,EAAtBG,OAAQC,EAAcJ,EAAdI,UACtB,OACE,eAAC,UAAD,CAAQC,eAAgB,gBAAxB,UACE,eAAC,UAAD,CAAQC,MAAO,EAAf,UACE,cAAC,UAAD,UAAOF,IACP,cAAC,UAAD,UAAUD,EAAV,SAAyBD,OAE3B,cAAC,UAAD,UAAOK,kBAAmB,CAAC,CAAEJ,SAAQD,cALOD,IAsClD,OAAO,cAAC,UAAD,UAASO,OAAOC,OAAOrB,GAAiBsB,KA5B5B,SAACC,EAAcV,GAChC,IAAQP,EAAmCiB,EAAnCjB,KAAMC,EAA6BgB,EAA7BhB,KAAMiB,EAAuBD,EAAvBC,KAAMrB,EAAiBoB,EAAjBpB,aAC1B,OACE,cAAC,WAAD,CACEsB,UAAWxB,EACXyB,EAAG,OACHC,EAAG,KACHC,WAAY,WACZC,SAAU,WALZ,SAQE,eAAC,UAAD,CACEX,MAAO,EACPY,YAAa,EACbC,YAAa,eACbC,EAAG,EACHC,QAAS,KACTC,GAAI,EANN,UAQGhC,EAAaC,GACbE,EAAkBC,EAAMC,GAvC/B,eAAC,UAAD,CAAQU,eAAgB,gBAAxB,UACE,cAAC,UAAD,CAAMR,WAAY,IAAlB,4BACA,cAAC,UAAD,CAAMA,WAAY,IAAlB,oBAuCKe,EAAKF,IAAIX,OAbPE","file":"static/js/7.9f81d0d7.chunk.js","sourcesContent":["import { Badge, Heading, HStack, Skeleton, Text, VStack } from \"native-base\";\nimport { IExerciseHistory } from \"../../hooks/useExerciseHistory\";\nimport { ISet } from \"../../types/WorkoutInterface\";\nimport calculateOneRepMax from \"../../utils/Workouts/calculateOneRepMax\";\nimport Loader from \"../Utils/Loader\";\n\ninterface IExerciseDetailsHistory {\n  exerciseHistory: IExerciseHistory | undefined;\n  isLoading: boolean;\n}\n\nconst ExerciseDetailsHistory = ({\n  exerciseHistory,\n  isLoading,\n}: IExerciseDetailsHistory) => {\n  if (!exerciseHistory || isLoading) return <Loader />;\n\n  const renderHeader = (workout_name: string) => (\n    <Heading size={\"sm\"}>{workout_name}</Heading>\n  );\n\n  // const renderBadges = (sets: ISet[]) => {\n  //   const totalVolume = 0;\n\n  //   return (\n  //     <HStack justifyContent={\"start\"}>\n  //       <Badge\n  //         backgroundColor={\"info.100\"}\n  //         borderWidth={\"2\"}\n  //         borderColor={\"info.500\"}\n  //         px={2}\n  //       >\n  //         <Text\n  //           fontWeight={\"semibold\"}\n  //           color={\"info.900\"}\n  //           textTransform={\"uppercase\"}\n  //           fontSize={\"xs\"}\n  //         >\n  //           {totalVolume} Volume\n  //         </Text>\n  //       </Badge>\n  //     </HStack>\n  //   );\n  // };\n\n  const renderDateAndTime = (date: string, time: string) => (\n    <Text\n      fontSize={\"sm\"}\n      fontWeight={600}\n      color={\"coolGray.400\"}\n    >{`${date}, ${time}`}</Text>\n  );\n\n  const renderSetHead = () => (\n    <HStack justifyContent={\"space-between\"}>\n      <Text fontWeight={600}>Sets Performed</Text>\n      <Text fontWeight={600}>1RM</Text>\n    </HStack>\n  );\n\n  const renderSet = (set: ISet, index: number) => {\n    const { reps, weight, setNumber } = set;\n    return (\n      <HStack justifyContent={\"space-between\"} key={index}>\n        <HStack space={3}>\n          <Text>{setNumber}</Text>\n          <Text>{`${weight} kg x ${reps}`}</Text>\n        </HStack>\n        <Text>{calculateOneRepMax([{ weight, reps }])}</Text>\n      </HStack>\n    );\n  };\n\n  const renderCard = (history: any, index: number) => {\n    const { date, time, sets, workout_name } = history;\n    return (\n      <Skeleton\n        isLoaded={!isLoading}\n        w={\"full\"}\n        h={\"26\"}\n        startColor={\"gray.100\"}\n        endColor={\"gray.200\"}\n        key={index}\n      >\n        <VStack\n          space={2}\n          borderWidth={1}\n          borderColor={\"coolGray.200\"}\n          p={3}\n          rounded={\"md\"}\n          my={1}\n        >\n          {renderHeader(workout_name)}\n          {renderDateAndTime(date, time)}\n          {renderSetHead()}\n          {sets.map(renderSet)}\n        </VStack>\n      </Skeleton>\n    );\n  };\n\n  return <VStack>{Object.values(exerciseHistory).map(renderCard)}</VStack>;\n};\n\nexport default ExerciseDetailsHistory;\n"],"sourceRoot":""}