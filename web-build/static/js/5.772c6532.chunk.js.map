{"version":3,"sources":["components/Utils/Loader.tsx","utils/Workouts/getExerciseInitials.ts","hooks/useExerciseDetails.ts","hooks/useExerciseHistory.ts","components/ExerciseDetails/ExerciseDetailsAbout.tsx","components/Modals/ExerciseDetailsModal.tsx","components/Layout/Cards/ExerciseCard.tsx"],"names":["Loader","space","justifyContent","my","accessibilityLabel","colorScheme","color","fontSize","getExerciseInitials","itemName","split","map","el","useExerciseDetails","exerciseId","useState","details","setDetails","error","setError","isLoading","setIsLoading","useEffect","fetchExerciseDetails","supabase","from","select","eq","exercise_details_data","data","exercise_details_error","console","message","id","name","exercise_name","description","image","category","e","exercise_details","fetch","useExerciseHistory","exerciseHistory","setExerciseHistory","fetchExerciseHistory","order","ascending","limit","exercise_history_data","exercise_history_error","newExerciseHistory","reduce","acc","lift","lift_id","set","workout_name","workout_id","liftDate","Date","created_at","toLocaleDateString","liftTime","toLocaleTimeString","date","time","sets","ExerciseDetailsAbout","props","VStack","Text","fontWeight","ExerciseDetailsHistory","lazy","ExerciseDetailsRecords","ExerciseDetailsModal","ACTIVE_TAB","setActiveTab","isOpen","onClose","exerciseName","detailsIsLoading","detailsError","historyIsLoading","historyError","log","TAB_LIST","ABOUT","HISTORY","RECORDS","toast","useToast","show","placement","render","ToastAlert","title","status","variant","ModalWrapper","header","HStack","rounded","overflow","backgroundColor","Object","keys","index","activeBackground","activeShadow","activeText","Pressable","flex","textAlign","onPress","background","shadow","p","textTransform","letterSpacing","fallback","ExerciseCard","setIsOpen","isActive","setIsActive","dispatch","useAppDispatch","userId","useAppSelector","state","userSlice","user","exerciseOrder","currentWorkoutSlice","liftId","includes","handleAddToLiftData","addLift","deleteLift","Skeleton","h","startColor","endColor","isLoaded","Box","padding","_dark","borderColor","flexDirection","alignItems","showExerciseDetails","h1ColorMode","useColorScheme","Avatar","marginRight","renderAvatar","targets","h2ColorMode","renderBody","Checkbox","value","isChecked","aria-label","borderWidth","outlineColor","_checked","renderCheckbox","renderExerciseDetailsModal"],"mappings":"sFAAA,6CAaeA,UAXA,WACb,OACE,eAAC,UAAD,CAAQC,MAAO,EAAGC,eAAe,SAASC,GAAI,EAA9C,UACE,cAAC,UAAD,CAASC,mBAAmB,YAAYC,YAAa,SACrD,cAAC,UAAD,CAAMC,MAAM,eAAeC,SAAS,KAApC,6B,kICASC,EANa,SAACC,GAC3B,OAAOA,EAASC,MAAM,KAAKC,KAAI,SAACC,GAC9B,MAAM,GAAIA,EAAG,O,kFCmEFC,EAtDY,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,WAC1B,EAA8BC,qBAA9B,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,qBAA1B,WAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,oBAAkB,GAApD,WAAOK,EAAP,KAAkBC,EAAlB,KAgDA,OA9CAC,qBAAU,WACN,IAAMC,EAAoB,sBAAG,YACzB,IACI,YACUC,WACDC,KAAK,aACLC,OAAO,mDACPC,GAAG,KAAMb,GAJJc,EAAd,EAAQC,KAAoCC,EAA5C,EAAqCZ,MAMrC,OAAIY,GACAC,QAAQb,MAAMY,EAAuBE,SACrCb,EAASW,EAAuBE,SACzB,IAGgC,CACvCC,GAAIL,EAAsB,GAAGK,GAC7BC,KAAMN,EAAsB,GAAGO,cAC/BC,YAAaR,EAAsB,GAAGQ,YACtCC,MAAOT,EAAsB,GAAGS,MAChCC,SAAUV,EAAsB,GAAGU,UAIzC,MAAOC,GACLR,QAAQb,MAAMqB,EAAEP,SAChBb,EAASoB,EAAEP,aAzBO,sDA+Bf,sBAAG,YACV,IACI,IAAMQ,QAAyBjB,IAC/BN,EAAW,CAAEuB,qBACbnB,GAAa,GACf,MAAOkB,GACLR,QAAQb,MAAMqB,EAAEP,SAChBb,EAASoB,EAAEP,aAPR,qDAWXS,KACD,IAEI,CAAEzB,UAASE,QAAOE,c,ikBCjD7B,IA+DesB,EA/DY,SAAC5B,GAC1B,MAA8CC,qBAA9C,WAAO4B,EAAP,KAAwBC,EAAxB,KACA,EAA0B7B,qBAA1B,WAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,oBAAkB,GAApD,WAAOK,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACRuB,MACC,IAEH,IAAMA,EAAoB,sBAAG,YAC3B,IACExB,GAAa,GACb,YACQG,WACHC,KAAK,SACLC,OAFG,gGAKHC,GAAG,cAAeb,GAClBgC,MAAM,aAAc,CAAEC,WAAW,IACjCC,MAAM,IARGC,EAAd,EAAQpB,KAAoCqB,EAA5C,EAAqChC,MAUrC,GAAIgC,EAIF,OAHAnB,QAAQb,MAAMgC,EAAuBlB,SACrCb,EAAS+B,EAAuBlB,cAChCX,GAAa,GAIf,IAAM8B,EAAqBF,EAAsBG,QAAO,SAACC,EAAKC,GAC5D,IACEC,EAIED,EAJFC,QACApB,EAGEmB,EAHFnB,cACAqB,EAEEF,EAFFE,IACcC,EACZH,EADFI,WAAcD,aAEVE,EAAW,IAAIC,KAAKN,EAAKO,YAAYC,qBACrCC,EAAW,IAAIH,KAAKN,EAAKO,YAAYG,qBAE3C,OAAO,EAAP,KACKX,GADL,UAEGE,EAAU,CACTE,eACAQ,KAAMN,EACNO,KAAMH,EACN5B,gBACAgC,KAAMX,OAGT,IAEHnC,GAAa,GACbuB,EAAmBO,GACnB,MAAOZ,GACPR,QAAQb,MAAMqB,EAAEP,SAChBb,EAASoB,EAAEP,SACXX,GAAa,OA/CS,qDAmD1B,MAAO,CAAEsB,kBAAiBzB,QAAOE,c,gBCrBpBgD,EAxCc,SAACC,GAC5B,IAAQ7B,EAAgC6B,EAAhC7B,iBAAkBpB,EAAciD,EAAdjD,UAE1B,IAAKoB,GAAoBpB,EAAW,OAAO,cAACpB,EAAA,QAAD,IAE3C,IAAQkC,EAAgCM,EAAhCN,KAAMI,EAA0BE,EAA1BF,SAAUF,EAAgBI,EAAhBJ,YA0BxB,OACE,eAACkC,EAAA,QAAD,CAAQrE,MAAO,EAAf,eANA,cAACsE,EAAA,QAAD,CAAMhE,SAAU,KAAMiE,WAAY,IAAlC,SACGtC,IAlBD,eAACoC,EAAA,QAAD,WACE,cAACC,EAAA,QAAD,CAAMC,WAAY,IAAKjE,SAAU,KAAjC,sBACA,cAACgE,EAAA,QAAD,UAAOjC,OAOT,eAACgC,EAAA,QAAD,WACE,cAACC,EAAA,QAAD,CAAMC,WAAY,IAAKjE,SAAU,KAAjC,yBACA,cAACgE,EAAA,QAAD,UAAOnC,W,klBCZf,IAAMqC,EAAyBC,gBAC7B,kBAAM,iCAEFC,EAAyBD,gBAC7B,kBAAM,iCAqHOE,EAlHc,SAACP,GAC5B,MAAmCtD,mBAAgB,SAAnD,WAAO8D,EAAP,KAAmBC,EAAnB,KACQC,EAA8CV,EAA9CU,OAAQC,EAAsCX,EAAtCW,QAASC,EAA6BZ,EAA7BY,aAAcnE,EAAeuD,EAAfvD,WACvC,EAIID,EAAmB,CACrBC,eAJAE,EADF,EACEA,QACWkE,EAFb,EAEE9D,UACO+D,EAHT,EAGEjE,MAKF,EAIIwB,EAAmB5B,GAHrB6B,EADF,EACEA,gBACWyC,EAFb,EAEEhE,UACOiE,EAHT,EAGEnE,MAGFa,QAAQuD,IAAItE,GACZe,QAAQuD,IAAI3C,GAEZ,IAAM4C,EAAW,CACfC,MAAO,cAAC,EAAD,KAA0BxE,IACjCyE,QACE,cAAChB,EAAD,CACE9B,gBAAiBA,EACjBvB,UAAWgE,IAGfM,QACE,cAACf,EAAD,CACEhC,gBAAiBA,EACjBvB,UAAW8D,KAKXS,EAAQC,qBAEdtE,qBAAU,YACJ6D,GAAgBE,IAClBM,EAAME,KAAK,CACTC,UAAW,MACXC,OAAQ,kBACN,cAACC,EAAA,QAAD,CACEC,MAAM,QACN7D,YAAY,qEACZ8D,OAAO,QACPC,QAAQ,eAKf,CAACd,EAAcF,IAgDlB,OACE,cAACiB,EAAA,QAAD,CACErB,OAAQA,EACRC,QAASA,EACTqB,OAAWpB,EAAL,WAHR,SAKE,eAACX,EAAA,QAAD,CAAQrE,MAAO,EAAf,UAlDA,cAACqG,EAAA,QAAD,CACEpG,eAAgB,eAChBqG,QAAS,KACTC,SAAU,SACVC,gBAAiB,WAJnB,SAMGC,OAAOC,KAAKpB,GAAU5E,KAAI,SAACC,EAAIgG,GAC9B,IAAMC,EACJhC,IAAejE,EAAK,WAAa,eAC7BkG,EAAejC,IAAejE,EAAK,KAAO,KAC1CmG,EAAalC,IAAejE,EAAK,QAAU,eAEjD,OACE,cAACoG,EAAA,QAAD,CAEEC,KAAM,EACNC,UAAW,SACXC,QAAS,kBAAMrC,EAAalE,IAC5B4D,WAAY,IACZ4C,WAAYP,EACZQ,OAAQP,EACRQ,EAAG,EARL,SAUE,cAAC/C,EAAA,QAAD,CACEjE,MAAOyG,EACPQ,cAAe,aACf/C,WAAY,IACZjE,SAAU,KACViH,cAAe,KACfN,UAAW,SANb,SAQGtG,KAjBEgG,QA2Bf,cAAC,WAAD,CAAUa,SAAU,cAACzH,EAAA,QAAD,IAApB,SAAiCuF,EAASV,WCqD/B6C,UA1JM,SAACrD,GACpB,IAAQjD,EAAkBiD,EAAlBjD,UAAWa,EAAOoC,EAAPpC,GAEnB,EAA4BlB,oBAAkB,GAA9C,WAAOgE,EAAP,KAAe4C,EAAf,KACA,EAAgC5G,oBAAkB,GAAlD,WAAO6G,EAAP,KAAiBC,EAAjB,KAEMC,EAAWC,2BAETC,EAAWC,0BAAe,SAACC,GAAD,OAAWA,EAAMC,UAAUC,QAArDJ,OACAK,EAAkBJ,0BACxB,SAACC,GAAD,OAAWA,EAAMI,uBADXD,cAIFE,EAAM,QAAWtG,EAEvBX,qBAAU,WACJ+G,EAAcG,SAASD,IACzBV,GAAY,KAEb,CAACQ,IAEJ,IAAM5B,EAAkBmB,EAAW,UAAY,QAUzCa,EAAsB,WAC1B,IAEMnF,EAAO,CACXxC,WAH4BuD,EAAtBpC,GAINgD,aAJ4BZ,EAAlBlC,cAKVoG,SACAP,SACA7D,KAAM,IAGR,IAAKyD,EAAU,OAAOE,EAASY,kBAAQ,CAACpF,KAExCwE,EAASa,qBAAW,CAAEJ,OAAQA,KAC9BV,GAAY,IA4Ed,OACE,qCACE,cAACe,EAAA,SAAD,CACEzI,GAAI,EACJ0I,EAAG,GACHC,WAAY,WACZC,SAAU,eACVC,SAAU5H,EALZ,SAOE,cAAC6H,EAAA,QAAD,CACEC,QAAS,EACTzC,gBAAiBA,EACjB0C,MAAO,CACL1C,gBAAiB,eACjB2C,YAAa,gBALjB,SAQE,eAACpC,EAAA,QAAD,CACEqC,cAAe,MACfC,WAAW,SACXnC,QAtHc,WAGtB,OAFgC9C,EAAxBkF,oBAEwB5B,GAAU,GAEnCc,KA8GD,UAzFa,WACnB,IAAQtG,EAAkBkC,EAAlBlC,cACAqH,EAAgBC,oBAAhBD,YAER,OACE,cAACE,EAAA,OAAD,CAAQC,YAAa,EAAGlD,gBAAiB,cAAzC,SACE,cAAClC,EAAA,QAAD,CACEhE,SAAU,KACViH,cAAe,KACfhD,WAAY,OACZlE,MAAOkJ,EAJT,SAMGhJ,EAAoB2B,OAkFlByH,GArDQ,WACjB,IAAQzH,EAA2BkC,EAA3BlC,cAAe0H,EAAYxF,EAAZwF,QACfC,EAAgBL,oBAAhBK,YAER,OACE,eAACxF,EAAA,QAAD,CAAQ2C,KAAM,EAAd,UACE,cAAC1C,EAAA,QAAD,CAAMjE,MAAOwJ,EAAatF,WAAY,WAAtC,SACGrC,IAEH,cAACoC,EAAA,QAAD,CAAMjE,MAAO,eAAgBC,SAAU,KAAvC,SACGsJ,OA4CEE,GA7EY,WACrB,IAAQ5H,EAAuCkC,EAAvClC,cAER,OAF+CkC,EAAxBkF,oBAmBhB,KAfH,cAACN,EAAA,QAAD,UACE,cAACe,EAAA,SAAD,CACE5J,mBAAkB,GAAK+B,EACvB8H,MAAM,WACN5J,YAAa,OACb6J,UAAWtC,EACXuC,aAAW,iBACXC,YAAa,IACbC,aAAa,QACbC,SAAU,CAAE7D,gBAAiB,gBAgE5B8D,UAvCwB,WACjC,IAAKxF,EAAQ,OAAO,KAEpB,IAAQ5C,EAAkBkC,EAAlBlC,cAER,OACE,cAAC,EAAD,CACE4C,OAAQA,EACRC,QAAS,kBAAM2C,GAAU,IACzB1C,aAAc9C,EACdrB,WAAYmB,IAiCbuI","file":"static/js/5.772c6532.chunk.js","sourcesContent":["import { Text, HStack, Spinner } from \"native-base\";\n\nconst Loader = () => {\n  return (\n    <HStack space={2} justifyContent=\"center\" my={2}>\n      <Spinner accessibilityLabel=\"Loading..\" colorScheme={\"blue\"} />\n      <Text color=\"coolGray.800\" fontSize=\"md\">\n        Loading...\n      </Text>\n    </HStack>\n  );\n};\n\nexport default Loader;\n","const getExerciseInitials = (itemName: string) => {\n  return itemName.split(\" \").map((el) => {\n    return `${el[0]}`;\n  });\n};\n\nexport default getExerciseInitials","import { useEffect, useState } from \"react\";\nimport { supabase } from \"../supabase/supabaseClient\";\n\ninterface IUseExerciseDetails {\n    exerciseId: number;\n}\n\ninterface IExerciseDetails {\n    id: number;\n    name: string;\n    description: string;\n    image: string;\n    category: string;\n}\n\nconst useExerciseDetails = ({ exerciseId }: IUseExerciseDetails) => {\n    const [details, setDetails] = useState<any>();\n    const [error, setError] = useState<string>();\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        const fetchExerciseDetails = async () => {\n            try {\n                const { data: exercise_details_data, error: exercise_details_error } =\n                    await supabase\n                        .from(\"exercises\")\n                        .select(\"id, exercise_name, category, description, image\")\n                        .eq(\"id\", exerciseId);\n\n                if (exercise_details_error) {\n                    console.error(exercise_details_error.message);\n                    setError(exercise_details_error.message);\n                    return {};\n                }\n\n                const exercise_details: IExerciseDetails = {\n                    id: exercise_details_data[0].id,\n                    name: exercise_details_data[0].exercise_name,\n                    description: exercise_details_data[0].description,\n                    image: exercise_details_data[0].image,\n                    category: exercise_details_data[0].category,\n                };\n\n                return exercise_details;\n            } catch (e) {\n                console.error(e.message);\n                setError(e.message);\n            }\n        };\n\n\n\n        const fetch = async () => {\n            try {\n                const exercise_details = await fetchExerciseDetails();\n                setDetails({ exercise_details });\n                setIsLoading(false);\n            } catch (e) {\n                console.error(e.message);\n                setError(e.message);\n            }\n        };\n\n        fetch();\n    }, []);\n\n    return { details, error, isLoading };\n};\n\nexport default useExerciseDetails;\n","import { useEffect, useState } from \"react\";\nimport { supabase } from \"../supabase/supabaseClient\";\nimport { ISet } from \"../types/WorkoutInterface\";\nimport {\n  getAcheivedOneRepMax,\n  getBestPerformance,\n} from \"../utils/Workouts/getRecords\";\n\nexport interface IExerciseHistory {\n  [key: string]: {\n    date: string;\n    time: string;\n    exercise_name: string;\n    sets: ISet[];\n  };\n}\n\nconst useExerciseHistory = (exerciseId: number) => {\n  const [exerciseHistory, setExerciseHistory] = useState<IExerciseHistory>();\n  const [error, setError] = useState<string>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    fetchExerciseHistory();\n  }, []);\n\n  const fetchExerciseHistory = async () => {\n    try {\n      setIsLoading(true);\n      const { data: exercise_history_data, error: exercise_history_error } =\n        await supabase\n          .from(\"lifts\")\n          .select(\n            `lift_id, created_at, exercise_name, set (weight, reps, setNumber), workout_id (workout_name)`\n          )\n          .eq(\"exercise_id\", exerciseId)\n          .order(\"created_at\", { ascending: false })\n          .limit(10);\n\n      if (exercise_history_error) {\n        console.error(exercise_history_error.message);\n        setError(exercise_history_error.message);\n        setIsLoading(false);\n        return;\n      }\n\n      const newExerciseHistory = exercise_history_data.reduce((acc, lift) => {\n        const {\n          lift_id,\n          exercise_name,\n          set,\n          workout_id: { workout_name },\n        } = lift;\n        const liftDate = new Date(lift.created_at).toLocaleDateString();\n        const liftTime = new Date(lift.created_at).toLocaleTimeString();\n\n        return {\n          ...acc,\n          [lift_id]: {\n            workout_name,\n            date: liftDate,\n            time: liftTime,\n            exercise_name,\n            sets: set,\n          },\n        };\n      }, {}) as IExerciseHistory;\n\n      setIsLoading(false);\n      setExerciseHistory(newExerciseHistory);\n    } catch (e) {\n      console.error(e.message);\n      setError(e.message);\n      setIsLoading(false);\n    }\n  };\n\n  return { exerciseHistory, error, isLoading };\n};\n\nexport default useExerciseHistory;\n","import { Text, VStack } from \"native-base\";\nimport Loader from \"../Utils/Loader\";\n\ninterface IExerciseDetailsAbout {\n  exercise_details:\n    | {\n        id: number;\n        description: string;\n        name: string;\n        category: string;\n        image: string;\n      }\n    | undefined;\n  isLoading: boolean;\n}\n\nconst ExerciseDetailsAbout = (props: IExerciseDetailsAbout) => {\n  const { exercise_details, isLoading } = props;\n\n  if (!exercise_details || isLoading) return <Loader />;\n\n  const { name, category, description } = exercise_details;\n\n  const renderCategory = () => {\n    return (\n      <VStack>\n        <Text fontWeight={600} fontSize={\"md\"}>Category</Text>\n        <Text>{category}</Text>\n      </VStack>\n    );\n  };\n\n  const renderDescription = () => {\n    return (\n      <VStack>\n        <Text fontWeight={600} fontSize={\"md\"}>Description</Text>\n        <Text>{description}</Text>\n      </VStack>\n    )\n  };\n\n  const renderName = () => {\n    <Text fontSize={\"lg\"} fontWeight={500}>\n      {name}\n    </Text>;\n  };\n\n  return (\n    <VStack space={2}>\n      {renderName()}\n      {renderCategory()}\n      {renderDescription()}\n    </VStack>\n  );\n};\n\nexport default ExerciseDetailsAbout;\n","import { Pressable, HStack, Text, VStack, useToast } from \"native-base\";\nimport React, {\n  lazy,\n  SetStateAction,\n  Suspense,\n  useEffect,\n  useState,\n} from \"react\";\nimport useExerciseDetails from \"../../hooks/useExerciseDetails\";\nimport useExerciseHistory from \"../../hooks/useExerciseHistory\";\nimport ExerciseDetailsAbout from \"../ExerciseDetails/ExerciseDetailsAbout\";\nimport Loader from \"../Utils/Loader\";\nimport ToastAlert from \"../Utils/ToastAlert\";\nimport ModalWrapper from \"./ModalWrapper\";\n\ninterface IExerciseDetailsModal {\n  isOpen: boolean;\n  onClose: React.Dispatch<SetStateAction<boolean>>;\n  exerciseName: string;\n  exerciseId: number;\n}\n\ntype TTabs = \"ABOUT\" | \"HISTORY\" | \"RECORDS\";\n\nconst ExerciseDetailsHistory = lazy(\n  () => import(\"../ExerciseDetails/ExerciseDetailsHistory\")\n);\nconst ExerciseDetailsRecords = lazy(\n  () => import(\"../ExerciseDetails/ExerciseDetailsRecords\")\n);\n\nconst ExerciseDetailsModal = (props: IExerciseDetailsModal) => {\n  const [ACTIVE_TAB, setActiveTab] = useState<TTabs>(\"ABOUT\");\n  const { isOpen, onClose, exerciseName, exerciseId } = props;\n  const {\n    details,\n    isLoading: detailsIsLoading,\n    error: detailsError,\n  } = useExerciseDetails({\n    exerciseId,\n  });\n\n  const {\n    exerciseHistory,\n    isLoading: historyIsLoading,\n    error: historyError,\n  } = useExerciseHistory(exerciseId);\n\n  console.log(details);\n  console.log(exerciseHistory);\n\n  const TAB_LIST = {\n    ABOUT: <ExerciseDetailsAbout {...details} />,\n    HISTORY: (\n      <ExerciseDetailsHistory\n        exerciseHistory={exerciseHistory}\n        isLoading={historyIsLoading}\n      />\n    ),\n    RECORDS: (\n      <ExerciseDetailsRecords\n        exerciseHistory={exerciseHistory}\n        isLoading={detailsIsLoading}\n      />\n    ),\n  };\n\n  const toast = useToast();\n\n  useEffect(() => {\n    if (detailsError || historyError) {\n      toast.show({\n        placement: \"top\",\n        render: () => (\n          <ToastAlert\n            title=\"Error\"\n            description=\"There was an error loading workout details, please try again later\"\n            status=\"error\"\n            variant=\"solid\"\n          />\n        ),\n      });\n    }\n  }, [historyError, detailsError]);\n\n  const renderTabs = () => {\n    return (\n      <HStack\n        justifyContent={\"space-evenly\"}\n        rounded={\"md\"}\n        overflow={\"hidden\"}\n        backgroundColor={\"gray.300\"}\n      >\n        {Object.keys(TAB_LIST).map((el, index) => {\n          const activeBackground =\n            ACTIVE_TAB === el ? \"info.400\" : \"coolGray.200\";\n          const activeShadow = ACTIVE_TAB === el ? \"lg\" : null;\n          const activeText = ACTIVE_TAB === el ? \"white\" : \"coolGray.800\";\n\n          return (\n            <Pressable\n              key={index}\n              flex={1}\n              textAlign={\"center\"}\n              onPress={() => setActiveTab(el as TTabs)}\n              fontWeight={500}\n              background={activeBackground}\n              shadow={activeShadow}\n              p={2}\n            >\n              <Text\n                color={activeText}\n                textTransform={\"capitalize\"}\n                fontWeight={700}\n                fontSize={\"xs\"}\n                letterSpacing={\"xl\"}\n                textAlign={\"center\"}\n              >\n                {el}\n              </Text>\n            </Pressable>\n          );\n        })}\n      </HStack>\n    );\n  };\n\n  const renderContent = () => (\n    <Suspense fallback={<Loader />}>{TAB_LIST[ACTIVE_TAB]}</Suspense>\n  );\n\n  return (\n    <ModalWrapper\n      isOpen={isOpen}\n      onClose={onClose}\n      header={`${exerciseName} Details`}\n    >\n      <VStack space={2}>\n        {renderTabs()}\n        {renderContent()}\n      </VStack>\n    </ModalWrapper>\n  );\n};\n\nexport default ExerciseDetailsModal;\n","import {\n  Avatar,\n  Box,\n  Checkbox,\n  Pressable,\n  Skeleton,\n  Text,\n  VStack,\n} from \"native-base\";\nimport { useAppDispatch, useAppSelector } from \"../../../store\";\nimport getExerciseInitials from \"../../../utils/Workouts/getExerciseInitials\";\nimport { addLift, deleteLift } from \"../../../store/currentWorkoutSlice\";\nimport useColorScheme from \"../../../hooks/useColorScheme\";\nimport ExerciseDetailsModal from \"../../Modals/ExerciseDetailsModal\";\nimport React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n  exercise_name: string;\n  category: string;\n  targets: string;\n  description: string;\n  image: string;\n  id: number;\n  isLoading: boolean;\n  showExerciseDetails: boolean;\n}\n\nconst ExerciseCard = (props: IProps) => {\n  const { isLoading, id } = props;\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isActive, setIsActive] = useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n\n  const { userId } = useAppSelector((state) => state.userSlice.user);\n  const { exerciseOrder } = useAppSelector(\n    (state) => state.currentWorkoutSlice\n  );\n\n  const liftId = `lift-${id}`;\n\n  useEffect(() => {\n    if (exerciseOrder.includes(liftId)) {\n      setIsActive(true);\n    }\n  }, [exerciseOrder]);\n\n  const backgroundColor = isActive ? \"info.50\" : \"white\";\n\n  const handlePressCard = () => {\n    const { showExerciseDetails } = props;\n\n    if (showExerciseDetails) return setIsOpen(true);\n\n    return handleAddToLiftData();\n  };\n\n  const handleAddToLiftData = () => {\n    const { id, exercise_name } = props;\n\n    const lift = {\n      exerciseId: id,\n      exerciseName: exercise_name,\n      liftId,\n      userId,\n      sets: {}\n    };\n\n    if (!isActive) return dispatch(addLift([lift]));\n\n    dispatch(deleteLift({ liftId: liftId }));\n    setIsActive(false);\n    return;\n  };\n\n  const renderAvatar = () => {\n    const { exercise_name } = props;\n    const { h1ColorMode } = useColorScheme();\n\n    return (\n      <Avatar marginRight={2} backgroundColor={\"transparent\"}>\n        <Text\n          fontSize={\"lg\"}\n          letterSpacing={\"xl\"}\n          fontWeight={\"bold\"}\n          color={h1ColorMode}\n        >\n          {getExerciseInitials(exercise_name)}\n        </Text>\n      </Avatar>\n    );\n  };\n\n  const renderCheckbox = () => {\n    const { exercise_name, showExerciseDetails } = props;\n\n    if (!showExerciseDetails) {\n      return (\n        <Box>\n          <Checkbox\n            accessibilityLabel={`${exercise_name}`}\n            value=\"isActive\"\n            colorScheme={\"info\"}\n            isChecked={isActive}\n            aria-label=\"Add to workout\"\n            borderWidth={\"0\"}\n            outlineColor=\"white\"\n            _checked={{ backgroundColor: \"info.200\" }}\n          />\n        </Box>\n      );\n    }\n\n    return null;\n  };\n\n  const renderBody = () => {\n    const { exercise_name, targets } = props;\n    const { h2ColorMode } = useColorScheme();\n\n    return (\n      <VStack flex={1}>\n        <Text color={h2ColorMode} fontWeight={\"semibold\"}>\n          {exercise_name}\n        </Text>\n        <Text color={\"coolGray.400\"} fontSize={\"sm\"}>\n          {targets}\n        </Text>\n      </VStack>\n    );\n  };\n\n  const renderExerciseDetailsModal = () => {\n    if (!isOpen) return null;\n\n    const { exercise_name } = props;\n\n    return (\n      <ExerciseDetailsModal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        exerciseName={exercise_name}\n        exerciseId={id}\n      />\n    );\n  };\n\n  return (\n    <>\n      <Skeleton\n        my={2}\n        h={12}\n        startColor={\"gray.200\"}\n        endColor={\"coolGray.200\"}\n        isLoaded={isLoading}\n      >\n        <Box\n          padding={3}\n          backgroundColor={backgroundColor}\n          _dark={{\n            backgroundColor: \"coolGray.700\",\n            borderColor: \"coolGray.700\",\n          }}\n        >\n          <Pressable\n            flexDirection={\"row\"}\n            alignItems=\"center\"\n            onPress={handlePressCard}\n          >\n            {renderAvatar()}\n            {renderBody()}\n            {renderCheckbox()}\n          </Pressable>\n        </Box>\n      </Skeleton>\n      {renderExerciseDetailsModal()}\n    </>\n  );\n};\n\nexport default ExerciseCard;\n"],"sourceRoot":""}