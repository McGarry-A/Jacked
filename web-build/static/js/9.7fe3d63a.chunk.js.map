{"version":3,"sources":["utils/Date/numericDateToString.ts","hooks/useWorkout.ts","components/WorkoutDetails.tsx"],"names":["numbericDateToString","date","newDate","split","year","Number","month","day","Date","toDateString","useWorkout","workoutId","userId","useAppSelector","state","userSlice","user","useState","isLoading","setIsLoading","error","setError","workout","setWorkout","useEffect","workoutDetails","fetchWorkoutDetails","liftDetails","fetchLiftDetails","name","workout_name","id","lifts","fetch","supabase","from","select","eq","data","console","message","WorkoutDetails","renderLiftSet","index","setNumber","weight","reps","HStack","justifyContent","Text","color","calculateOneRepMax","fallback","Loader","View","Heading","renderTitle","Box","renderWorkoutDetails","VStack","space","my","map","lift","exerciseName","exercise_name","size","fontWeight","set","renderLifts"],"mappings":"sJAUeA,EAVc,SAACC,GAC5B,IAAMC,EAAUD,EAAKE,MAAM,KACrBC,EAAOC,OAAOH,EAAQ,IACtBI,EAAQD,OAAOH,EAAQ,IACvBK,EAAMF,OAAOH,EAAQ,IAG3B,OADmB,IAAIM,KAAKJ,EAAME,EAAQ,EAAGC,GAC3BE,gB,kFCwELC,EAzEI,SAACC,GAClB,IAAQC,EAAWC,0BAAe,SAACC,GAAD,OAAWA,EAAMC,UAAUC,QAArDJ,OACR,EAAkCK,oBAAS,GAA3C,WAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,qBAA1B,WAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,qBAA9B,WAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,YACG,sBAAG,YACZ,IAAMC,QAAuBC,IACvBC,QAAoBC,IAE1BL,EAAW,CACTM,KAAMJ,EAAeK,aACrB7B,KAAMwB,EAAexB,KACrB8B,GAAIN,EAAeM,GACnBC,MAAM,IAAML,KAGdR,GAAa,MAXJ,qDAcXc,KACC,IAEH,IAAMP,EAAmB,sBAAG,YAC1B,IACE,YAA8BQ,WAC3BC,KAAK,YACLC,OAAO,0BACPC,GAAG,UAAWzB,GACdyB,GAAG,KAAM1B,GAJJ2B,EAAR,EAAQA,KAAMlB,EAAd,EAAcA,MAMd,OAAIA,GACFmB,QAAQnB,MAAMA,EAAMoB,SACpBrB,GAAa,QACbE,EAASD,EAAMoB,UAIVF,EAAK,GACZ,MAAOlB,GACPmB,QAAQnB,MAAMA,GACdD,GAAa,OAlBQ,qDAsBnBS,EAAgB,sBAAG,YACvB,IACE,YAA8BM,WAC3BC,KAAK,SACLC,OAF2B,oGAM3BC,GAAG,UAAWzB,GACdyB,GAAG,aAAc1B,GAPZ2B,EAAR,EAAQA,KAAMlB,EAAd,EAAcA,MASd,OAAIA,GACFC,EAASD,EAAMoB,cACfrB,GAAa,IAIRmB,EACP,MAAOlB,GACPmB,QAAQnB,MAAMA,GACdD,GAAa,OApBK,qDAwBtB,MAAO,CAAED,YAAWE,QAAOE,Y,gBCUdmB,UA1EQ,SAAC,GAAoC,IAAlC9B,EAAiC,EAAjCA,UACxB,EAAsCD,EAAWC,GAAzCO,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,MAAOE,EAA1B,EAA0BA,QAE1B,GAAuB,qBAAZA,GAA2BF,GAASF,EAAW,OAAO,6BAEjE,IA+CMwB,EAAgB,SAAC,EAAmCC,GAAmB,IAApDC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,KAC1C,OACE,eAACC,EAAA,QAAD,CAAQC,eAAgB,gBAAxB,UACE,cAACC,EAAA,QAAD,CAAMC,MAAO,WAAb,SAA0BN,IAC1B,cAACK,EAAA,QAAD,CAAMC,MAAO,WAAb,SAA0BL,IAC1B,cAACI,EAAA,QAAD,CAAMC,MAAO,WAAb,SAA0BJ,IAC1B,cAACG,EAAA,QAAD,CAAMC,MAAO,WAAb,SAA0BC,kBAAmB,CAAC,CAAEN,SAAQC,cAJZH,IASlD,OACE,cAAC,WAAD,CAAUS,SAAU,cAACC,EAAA,QAAD,IAApB,SACE,eAACC,EAAA,KAAD,WA5DgB,WAClB,MAAmChC,EAA3BO,YAAR,MAAe,gBAAf,EAEA,OAAO,cAAC0B,EAAA,QAAD,UAAU1B,IA0DZ2B,GAvDsB,WAC3B,IAAQvD,EAASqB,EAATrB,KAER,OACE,cAACwD,EAAA,QAAD,UACE,cAACR,EAAA,QAAD,CAAMC,MAAO,WAAb,SAA0BlD,EAAqBC,OAmD9CyD,GAhCa,WAClB,IAAQ1B,EAAUV,EAAVU,MAER,OACE,cAAC2B,EAAA,QAAD,CAAQC,MAAO,EAAGC,GAAI,EAAtB,SACG7B,EAAM8B,KAAI,SAACC,EAAMpB,GAChB,OACE,eAACgB,EAAA,QAAD,YArBcK,EAsBID,EAAKE,cApB7B,eAACN,EAAA,QAAD,CAAQC,MAAO,EAAf,UACE,cAACL,EAAA,QAAD,CAASW,KAAK,KAAd,SAAoBF,IACpB,eAACjB,EAAA,QAAD,CAAQC,eAAgB,gBAAxB,UACE,cAACC,EAAA,QAAD,CAAMkB,WAAY,WAAlB,iBACA,cAAClB,EAAA,QAAD,CAAMkB,WAAY,WAAlB,oBACA,cAAClB,EAAA,QAAD,CAAMkB,WAAY,WAAlB,kBACA,cAAClB,EAAA,QAAD,CAAMkB,WAAY,WAAlB,wBAeKJ,EAAKK,IAAIN,KAAI,SAACM,EAAKzB,GAAN,OAAgBD,EAAc0B,EAAKzB,QAFtCA,GArBA,IAACqB,OA+CjBK","file":"static/js/9.7fe3d63a.chunk.js","sourcesContent":["const numbericDateToString = (date: string): string => {\n  const newDate = date.split(\"-\");\n  const year = Number(newDate[0]);\n  const month = Number(newDate[1]);\n  const day = Number(newDate[2]);\n\n  const stringDate = new Date(year, month - 1, day);\n  return stringDate.toDateString();\n};\n\nexport default numbericDateToString","import { useEffect, useState } from \"react\";\nimport { LiftData } from \"../screens/modals/AddExercises\";\nimport { useAppSelector } from \"../store\";\nimport { supabase } from \"../supabase/supabaseClient\";\nimport { ILifts, IWorkout } from \"../types/WorkoutInterface\";\n\nconst useWorkout = (workoutId: number) => {\n  const { userId } = useAppSelector((state) => state.userSlice.user);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>();\n  const [workout, setWorkout] = useState<IWorkout>();\n\n  useEffect(() => {\n    const fetch = async () => {\n      const workoutDetails = await fetchWorkoutDetails();\n      const liftDetails = await fetchLiftDetails();\n\n      setWorkout({\n        name: workoutDetails.workout_name,\n        date: workoutDetails.date,\n        id: workoutDetails.id,\n        lifts: [...(liftDetails as ILifts[])],\n      });\n\n      setIsLoading(false);\n    };\n\n    fetch();\n  }, []);\n\n  const fetchWorkoutDetails = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"workouts\")\n        .select(\"id, date, workout_name\")\n        .eq(\"user_id\", userId)\n        .eq(\"id\", workoutId);\n\n      if (error) {\n        console.error(error.message);\n        setIsLoading(false);\n        setError(error.message);\n        return;\n      }\n\n      return data[0];\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n    }\n  };\n\n  const fetchLiftDetails = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"lifts\")\n        .select(\n          `exercise_id, exercise_name, lift_id, \n                            set (weight, reps, setNumber)`\n        )\n        .eq(\"user_id\", userId)\n        .eq(\"workout_id\", workoutId);\n\n      if (error) {\n        setError(error.message);\n        setIsLoading(false);\n        return;\n      }\n\n      return data as ILifts[];\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n    }\n  };\n  \n  return { isLoading, error, workout };\n};\n\nexport default useWorkout;\n","import { ISet } from \"../types/WorkoutInterface\";\nimport { Box, Heading, HStack, Text, View, VStack } from \"native-base\";\nimport numbericDateToString from \"../utils/Date/numericDateToString\";\nimport calculateOneRepMax from \"../utils/Workouts/calculateOneRepMax\";\nimport useWorkout from \"../hooks/useWorkout\";\nimport { Suspense } from \"react\";\nimport Loader from \"./Utils/Loader\";\n\ninterface IWorkoutDetails {\n  workoutId: number;\n}\n\nconst WorkoutDetails = ({ workoutId }: IWorkoutDetails) => {\n  const { isLoading, error, workout } = useWorkout(workoutId);\n\n  if (typeof workout === \"undefined\" || error || isLoading) return <></>;\n\n  const renderTitle = () => {\n    const { name = \"Quick Workout\" } = workout;\n\n    return <Heading>{name}</Heading>;\n  };\n\n  const renderWorkoutDetails = () => {\n    const { date } = workout;\n\n    return (\n      <Box>\n        <Text color={\"gray.500\"}>{numbericDateToString(date)}</Text>\n      </Box>\n    );\n  };\n\n  const renderLiftHead = (exerciseName: string) => {\n    return (\n      <VStack space={1}>\n        <Heading size=\"md\">{exerciseName}</Heading>\n        <HStack justifyContent={\"space-between\"}>\n          <Text fontWeight={\"semibold\"}>Set</Text>\n          <Text fontWeight={\"semibold\"}>Weight</Text>\n          <Text fontWeight={\"semibold\"}>Reps</Text>\n          <Text fontWeight={\"semibold\"}>1RM</Text>\n        </HStack>\n      </VStack>\n    );\n  };\n\n  const renderLifts = () => {\n    const { lifts } = workout;\n\n    return (\n      <VStack space={3} my={3}>\n        {lifts.map((lift, index) => {\n          return (\n            <VStack key={index}>\n              {renderLiftHead(lift.exercise_name)}\n              {lift.set.map((set, index) => renderLiftSet(set, index))}\n            </VStack>\n          );\n        })}\n      </VStack>\n    );\n  };\n\n  const renderLiftSet = ({ setNumber, weight, reps }: ISet, index: number) => {\n    return (\n      <HStack justifyContent={\"space-between\"} key={index}>\n        <Text color={\"gray.500\"}>{setNumber}</Text>\n        <Text color={\"gray.500\"}>{weight}</Text>\n        <Text color={\"gray.500\"}>{reps}</Text>\n        <Text color={\"gray.500\"}>{calculateOneRepMax([{ weight, reps }])}</Text>\n      </HStack>\n    );\n  };\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <View>\n        {renderTitle()}\n        {renderWorkoutDetails()}\n        {renderLifts()}\n      </View>\n    </Suspense>\n  );\n};\n\nexport default WorkoutDetails;\n"],"sourceRoot":""}