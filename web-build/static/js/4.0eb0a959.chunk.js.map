{"version":3,"sources":["node_modules/@fortawesome/free-regular-svg-icons/faClock.js","utils/Date/getDaysAgo.ts","components/Layout/Cards/HistoryCard.tsx"],"names":["Object","defineProperty","exports","value","aliases","svgPathData","definition","prefix","iconName","icon","faClock","width","height","ligatures","unicode","getDaysAgo","date","current","moment","dateMoment","differenceInDays","diff","WorkoutDetailsModal","lazy","memo","workoutName","lifts","workoutId","isLoaded","useState","isVisible","setIsVisible","isLifts","keys","length","useColorScheme","pTextColorMode","h2ColorMode","renderBestSet","sets","bestSet","reduce","acc","curr","weight","reps","Text","fontSize","color","flex","Pressable","onPress","VStack","space","w","borderRadius","padding","marginY","borderWidth","borderColor","backgroundColor","HStack","alignItems","fontWeight","marginTop","Box","marginBottom","values","map","el","index","numberOfSets","set","display","exercise_name","size","ml"],"mappings":"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","file":"static/js/4.0eb0a959.chunk.js","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar prefix = 'far';\nvar iconName = 'clock';\nvar width = 512;\nvar height = 512;\nvar aliases = [128339,\"clock-four\"];\nvar unicode = 'f017';\nvar svgPathData = 'M232 120C232 106.7 242.7 96 256 96C269.3 96 280 106.7 280 120V243.2L365.3 300C376.3 307.4 379.3 322.3 371.1 333.3C364.6 344.3 349.7 347.3 338.7 339.1L242.7 275.1C236 271.5 232 264 232 255.1L232 120zM256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0zM48 256C48 370.9 141.1 464 256 464C370.9 464 464 370.9 464 256C464 141.1 370.9 48 256 48C141.1 48 48 141.1 48 256z';\n\nexports.definition = {\n  prefix: prefix,\n  iconName: iconName,\n  icon: [\n    width,\n    height,\n    aliases,\n    unicode,\n    svgPathData\n  ]};\n\nexports.faClock = exports.definition;\nexports.prefix = prefix;\nexports.iconName = iconName;\nexports.width = width;\nexports.height = height;\nexports.ligatures = aliases;\nexports.unicode = unicode;\nexports.svgPathData = svgPathData;\nexports.aliases = aliases;","import moment from \"moment\";\n\nconst getDaysAgo = (date: string) => {\n  const current = moment();\n  const dateMoment = moment(date);\n\n  const differenceInDays = current.diff(dateMoment, \"days\");\n\n  if (differenceInDays === 0) return `Today`;\n  if (differenceInDays === 1) return `1 day ago`;\n  if (differenceInDays < 30) return `${differenceInDays} days ago`;\n\n  return date\n};\n\nexport default getDaysAgo;\n","import { faClock } from \"@fortawesome/free-regular-svg-icons/faClock\";\nimport { Box, HStack, Skeleton, Text, VStack } from \"native-base\";\nimport React, { memo, useState, lazy, Suspense, useEffect } from \"react\";\nimport getDaysAgo from \"../../../utils/Date/getDaysAgo\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-native-fontawesome\";\nimport useColorScheme from \"../../../hooks/useColorScheme\";\nimport { Pressable } from \"react-native\";\n\nconst WorkoutDetailsModal = lazy(() => import(\"../../Modals/WorkoutDetailsModal\"));\n\ninterface IHistoryCard {\n  isLoaded: boolean;\n  workoutName: string | null;\n  date: string;\n  workoutId: number;\n  lifts: {\n    [key: number]: {\n      exercise_name: string;\n      set: {\n        weight: number;\n        reps: number;\n      }[];\n    };\n  };\n}\n\nconst HistoryCard = ({\n  workoutName,\n  date,\n  lifts,\n  isLoaded,\n  workoutId,\n}: IHistoryCard) => {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const isLifts = Object.keys(lifts).length > 0;\n\n  const { pTextColorMode, h2ColorMode } = useColorScheme();\n\n  const renderHeader = () => {\n    return (\n      <HStack alignItems={\"center\"}>\n        <Text flex={1} fontSize={\"md\"} fontWeight={\"bold\"} color={h2ColorMode}>\n          {workoutName === null ? \"Quick Workout\" : workoutName}\n        </Text>\n        {/* <Elipsis size={14} onPress={() => setIsVisible(true)} /> */}\n      </HStack>\n    );\n  };\n\n  const renderDaysAgo = () => {\n    return (\n      <HStack alignItems={\"center\"}>\n        <FontAwesomeIcon icon={faClock} size={10} color=\"gray\" />\n        <Text fontSize={\"xs\"} color=\"text.400\" ml={2}>\n          {getDaysAgo(date)}\n        </Text>\n      </HStack>\n    );\n  };\n\n  const renderLiftsHead = () => {\n    if (!isLifts) return null;\n    return (\n      <HStack marginTop={1}>\n        <Text fontWeight={\"semibold\"} color={pTextColorMode} flex={1}>\n          Exercise Name\n        </Text>\n        <Text fontWeight={\"semibold\"} color={pTextColorMode} flex={1}>\n          Best Set\n        </Text>\n      </HStack>\n    );\n  };\n\n  const renderBestSet = (sets: Array<{ weight: number; reps: number }>) => {\n    if (!isLifts) return null;\n\n    const bestSet = sets.reduce(\n      (acc, curr) => {\n        if (acc.weight * acc.reps < curr.weight * curr.reps) return curr;\n        return acc;\n      },\n      { weight: 0, reps: 0 }\n    );\n\n    return (\n      <Text fontSize={\"sm\"} color={\"coolGray.500\"} flex={1}>\n        {bestSet.weight}KG x {bestSet.reps}\n      </Text>\n    );\n  };\n\n  const renderLifts = () => {\n    return (\n      <Box marginBottom={1}>\n        {Object.values(lifts).map((el, index) => {\n          const numberOfSets = el.set.length;\n          return (\n            <HStack key={index}>\n              <Text\n                display={\"block\"}\n                fontSize={\"sm\"}\n                color={\"coolGray.500\"}\n                flex={1}\n              >\n                {el.exercise_name} x {numberOfSets}\n              </Text>\n              {renderBestSet(el.set)}\n            </HStack>\n          );\n        })}\n      </Box>\n    );\n  };\n\n  const renderNoLifts = () => {\n    if (isLifts) return null;\n\n    return (\n      <Text fontSize={\"sm\"} color={\"coolGray.500\"}>\n        No Lifts\n      </Text>\n    );\n  };\n\n  const renderModal = () => {\n    if (!isVisible) return null;\n\n    return (\n      <Suspense>\n        <WorkoutDetailsModal\n          isVisible={isVisible}\n          setIsVisible={setIsVisible}\n          workoutId={workoutId}\n        />\n      </Suspense>\n    );\n  };\n\n  return (\n    <>\n      <Pressable onPress={() => setIsVisible(true)}>\n        <VStack\n          space={1}\n          w={\"full\"}\n          borderRadius={5}\n          padding={3}\n          marginY={1}\n          borderWidth={2}\n          borderColor={\"coolGray.100\"}\n          backgroundColor={\"transparent\"}\n        >\n          {renderHeader()}\n          {renderLiftsHead()}\n          {renderLifts()}\n          {renderNoLifts()}\n          {renderDaysAgo()}\n        </VStack>\n      </Pressable>\n      {renderModal()}\n    </>\n  );\n};\n\nexport default memo(HistoryCard);\n"],"sourceRoot":""}